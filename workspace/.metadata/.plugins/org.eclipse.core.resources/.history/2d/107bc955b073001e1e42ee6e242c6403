#include "Shape.hpp"
#include <stdio.h>

using namespace std;

Shape::Shape() {
	reset();
}

Shape::~Shape() { };

Matrix Shape::getMC() {
	return  mc;
};


void Shape::reset(){
	mc.loadIdentity();
	s = 1;
}

void Shape::translate(GLfloat tx, GLfloat ty, GLfloat tz) {
	mc.mat[0][3] += tx;
	mc.mat[1][3] += ty;
	mc.mat[2][3] += tz;
	mc.mat[3][3] = 1;
}

void Shape::rotate(GLfloat rx, GLfloat ry, GLfloat rz, GLfloat angle) {
	Matrix m;
	m.rotateMatrix(rx, ry, rz, angle);
	mc.matrixPreMultiply(&m);
}


void Shape::rotate(GLfloat x0, GLfloat  y0, GLfloat  z0, GLfloat  rx, GLfloat  ry, GLfloat rz,  GLfloat  angle) {

	// Create identity matrices for temp and rot matrix
	Matrix rotMat; Matrix tempMat;
	rotMat.loadIdentity();
	tempMat.loadIdentity();

	tempMat.mat[0][3] += -x0;
	tempMat.mat[1][3] += -y0;
	tempMat.mat[2][3] += -z0;
	tempMat.mat[3][3] = 1;
	rotMat.matrixPreMultiply(&tempMat); // Apply translation to rotMat

	tempMat.loadIdentity();
	tempMat.rotateMatrix(rx, ry, rz, angle);
	rotMat.matrixPreMultiply(&tempMat);

	tempMat.loadIdentity();
	tempMat.mat[0][3] += x0;
	tempMat.mat[1][3] += y0;
	tempMat.mat[2][3] += z0;
	tempMat.mat[3][3] = 1;
	rotMat.matrixPreMultiply(&tempMat);

	mc.matrixPreMultiply(&rotMat);
}


void Shape::rotateOrigin(GLfloat  rx, GLfloat  ry, GLfloat rz,  GLfloat  angle) {
	// Create identity matrices for temp and rot matrix
	Matrix rotMat; Matrix tempMat;
	rotMat.loadIdentity();
	tempMat.loadIdentity();

	int dx; int dy; int dz;
	dx = 0 - mc.mat[0][3];
	dy = 0 - mc.mat[1][3];
	dz = 0 - mc.mat[2][3];
	tempMat.mat[0][3] += -dx;
	tempMat.mat[1][3] += -dy;
	tempMat.mat[2][3] += -dz;
	tempMat.mat[3][3] = 1;
	rotMat.matrixPreMultiply(&tempMat); // Apply translation to rotMat

	tempMat.loadIdentity();
	tempMat.rotateMatrix(rx, ry, rz, angle);
	rotMat.matrixPreMultiply(&tempMat);

	tempMat.loadIdentity();
	tempMat.mat[0][3] += x0;
	tempMat.mat[1][3] += y0;
	tempMat.mat[2][3] += z0;
	tempMat.mat[3][3] = 1;
	rotMat.matrixPreMultiply(&tempMat);

	mc.matrixPreMultiply(&rotMat);
}


void Shape::setScale(GLfloat x) {
	s = x;
}

void Shape::scaleChange(GLfloat x) {
	s += x;

	int dx; int dy; int dz;
	dx = 0 - mc.mat[0][3];
	dy = 0 - mc.mat[1][3];
	dz = 0 - mc.mat[2][3];

	translate(dx, dy, dz);

	std::cout<<"\n";
	std::cout<<"Scale: " << s << "      X:" << x << endl;

	Matrix tempMat;
	tempMat.loadIdentity();
	tempMat.mat[0][0] = s;
	tempMat.mat[1][1] = s;
	tempMat.mat[2][2] = s;

	mc.matrixPreMultiply(&tempMat);
	mc.show();
	std::cout<<"\n";

	translate(-dx, -dy, -dz);
}

void Shape::setId(GLint i) {
	id = i;
}

GLint Shape::getId() {
	return id;
}

void Shape::ctmMultiply() {
	GLfloat M[16];
	M[0] = mc.mat[0][0];
	M[1] = mc.mat[1][0];
	M[2] = mc.mat[2][0];
	M[3] = 0;
	M[4] = mc.mat[0][1];
	M[5] = mc.mat[1][1];
	M[6] = mc.mat[2][1];
	M[7] = 0;
	M[8] = mc.mat[0][2];
	M[9] = mc.mat[1][2];
	M[10] = mc.mat[2][2];
	M[11] = 0;
	M[12] = mc.mat[0][3];
	M[13] = mc.mat[1][3];
	M[14] = mc.mat[2][3];
	M[15] = 1;
	glMultMatrixf(M);
}
